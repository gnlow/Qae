@top Program { Statement* }

@precedence {
  call,

  times @left,
  plus @left,

  rel @left
}

kw<term> { @specialize[@name={term}]<Identifier, term> }

Statement {
  IfStatement |
  WhileStatement |
  Assignment |
  ExpressionStatement
}

FunctionDef {
  kw<"fun"> FuncName { Identifier }? "(" (Identifier ("," Identifier)*)? ")" Block
}

IfStatement {
  kw<"if"> "(" Expression ")" Block
  (kw<"else"> Block)?
}

WhileStatement {
  kw<"while"> "(" Expression ")" Block
}

Assignment {
  Identifier At { "[" Expression "]" }?
  "=" Expression
}

ExpressionStatement {
  Expression
}

Block {
  "{" Statement* "}"
}

Expression {
  FunctionDef |
  FunctionCall |
  BinaryExpression |
  String |
  Char |
  IdentifierExpression |
  Number |
  "(" Expression ")"
}

IdentifierExpression {
  Identifier At { "[" Expression "]" }?
}

CompareOp { "<" | "<=" | ">" | ">=" | "==" | "!=" }

BinaryExpression {
  Expression !times Op { "/" | "%" | "*" } Expression |
  Expression !plus Op { "+" | "-" } Expression |
  Expression !rel Op { CompareOp } Expression
}

FunctionCall {
  Expression !call"(" (Expression ("," Expression)*)? ")"
}

@skip {} {
  String {
    "\"" stringContent* stringEnd
  }
}

@local tokens {
  stringEnd { "\"" }
  @else stringContent
}

@skip {} {
  Char {
    "'" charContent* charEnd
  }
}

@local tokens {
  charEnd { "'" }
  @else charContent
}

@tokens {
  Identifier { $[a-zA-Z_] $[a-zA-Z0-9_]* }
  Number { $[0-9]+ }
  space { $[ \t\n]+ }

  assign { "=" }
  "=="
  comma { "," }
  lparen { "(" }
  rparen { ")" }
  lbrace { "{" }
  rbrace { "}" }
  lsq { "[" }
  rsq { "]" }
}

@skip { space }
